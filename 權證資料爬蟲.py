{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "645fb908-3bf5-4d58-b08c-c94bdcd403e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import bs4\n",
    "import urllib.request as req\n",
    "import datetime as dt\n",
    "import math\n",
    "from googletrans import Translator\n",
    "from openpyxl import Workbook\n",
    "from openpyxl.styles import Font"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "aba5eaf1-2a8c-45de-a023-39029df1beb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def line_notify_kgi(token,lst_s,lst_f):\n",
    "    import requests\n",
    "# 我的:COboFPxISDbIGKH4VkTZ7VN0bUAIR6Yp9Zq1faDVPEp\n",
    "# 公司:nc15Po2hiGmEMNBYnMP2FBf2lCgf0FsKhq4UJOXt4cd\n",
    "    message = \"凱基權證抓取成功名單:\"\n",
    "    message += \"\\n\"\n",
    "    for i in lst_s :\n",
    "        message += i\n",
    "        message += \"\\n\"\n",
    "        \n",
    "    message += \"\\n\"\n",
    "    message += \"凱基權證抓取失敗名單:\"\n",
    "    for j in lst_f :\n",
    "        message += j\n",
    "        message += \"\\n\"\n",
    "        \n",
    "#         message += f\"溫度: {data[5]}°C - {data[7]}°C\\n\"\n",
    "#         message += f\"降雨機率: {data[4]}%\\n\"\n",
    "#         message += f\"舒適度: {data[6]}\\n\"\n",
    "#         message += f\"時間: {data[1]} ~ {data[2]}\\n\"\n",
    "    # line notify所需資料\n",
    "    line_url = \"https://notify-api.line.me/api/notify\"\n",
    "    line_header = {\n",
    "        \"Authorization\": 'Bearer ' + token,\n",
    "        \"Content-Type\": \"application/x-www-form-urlencoded\"\n",
    "    }\n",
    "    line_data = {\n",
    "        \"message\": message\n",
    "    }\n",
    "\n",
    "    requests.post(url=line_url, headers=line_header, data=line_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2d0919b9-3420-4705-a948-e3f086959f32",
   "metadata": {},
   "outputs": [],
   "source": [
    "def line_notify_yuanta(token,lst_s,lst_f):\n",
    "    import requests\n",
    "# 我的:COboFPxISDbIGKH4VkTZ7VN0bUAIR6Yp9Zq1faDVPEp\n",
    "# 公司:nc15Po2hiGmEMNBYnMP2FBf2lCgf0FsKhq4UJOXt4cd\n",
    "    message = \"元大權證抓取成功名單:\"\n",
    "    message += \"\\n\"\n",
    "    for i in lst_s :\n",
    "        message += i\n",
    "        message += \"\\n\"\n",
    "        \n",
    "    message += \"\\n\"\n",
    "    \n",
    "    message += \"元大權證抓取失敗名單:\"\n",
    "    for j in lst_f :\n",
    "        message += j\n",
    "        message += \"\\n\"\n",
    "        \n",
    "#         message += f\"溫度: {data[5]}°C - {data[7]}°C\\n\"\n",
    "#         message += f\"降雨機率: {data[4]}%\\n\"\n",
    "#         message += f\"舒適度: {data[6]}\\n\"\n",
    "#         message += f\"時間: {data[1]} ~ {data[2]}\\n\"\n",
    "    # line notify所需資料\n",
    "    line_url = \"https://notify-api.line.me/api/notify\"\n",
    "    line_header = {\n",
    "        \"Authorization\": 'Bearer ' + token,\n",
    "        \"Content-Type\": \"application/x-www-form-urlencoded\"\n",
    "    }\n",
    "    line_data = {\n",
    "        \"message\": message\n",
    "    }\n",
    "\n",
    "    requests.post(url=line_url, headers=line_header, data=line_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "955fd7af-d038-4505-9f9b-50200a6fefca",
   "metadata": {},
   "outputs": [],
   "source": [
    "def strip_html(element):\n",
    "    headers = []\n",
    "    for header in element :\n",
    "        headers.append(header.text.strip())\n",
    "    return headers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e7eb5860-0297-4a26-b599-f88c3f95f40b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def indicator_str_replace(string,colon):\n",
    "    string = string.replace(\"\\r\\n                                                \",\" \") #iv\n",
    "    string = string.replace(\"\\r\\n                                            \\n\",\" \") #end of day\n",
    "    string = string.replace(\"\\r\\n                                               \",\" \") # Intrinsic\n",
    "    string = string.replace(\"\\r\\n                                            \",\" \") #Moneyness (%)\n",
    "    string = string.replace(\"\\r\\n                                            /\\r\\n                                            \",\" \") #OTM\n",
    "    string = string.replace(\"\\r\\n                                            \",\" \") #premium\n",
    "    string = string.replace(\"\\r\\n                                                \",\" \") # time decay\n",
    "    string = string.replace(\"\\r\\n                                            \",\" \")\n",
    "    string = string.replace(\"xa0\",\" \")\n",
    "    string = string.replace(\"\\r\\n                                         \",\" \")\n",
    "    string = string.replace(\" \\n   \",\" \")\n",
    "    if colon == True :\n",
    "        string = string.replace(\":\",\"\")\n",
    "        return string\n",
    "    else :\n",
    "        return string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "32b4acd2-4f9b-433c-911a-2ebb5486133d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def table_crawler() :\n",
    "    table = root.select(\"td , th , .spanBidOff , .c-font-bold div\")\n",
    "    \n",
    "    headers = []\n",
    "    for header in table :\n",
    "        headers.append(header.text.strip())\n",
    "        \n",
    "    future_name = headers[3]\n",
    "    \n",
    "    price_list = headers[14:]\n",
    "    日期 = headers[7:14]\n",
    "    \n",
    "    future_list = [] \n",
    "    future_ind = []\n",
    "    for ind , p in enumerate(price_list):\n",
    "        p = p.replace(\",\",'') \n",
    "\n",
    "        if float(p) >200 :       \n",
    "            future_list.append(p)\n",
    "            future_ind.append(ind)\n",
    "\n",
    "\n",
    "    future_dic = {}\n",
    "\n",
    "    for ind in range(len(future_list)):\n",
    "\n",
    "        if ind < len(future_list)-1 :\n",
    "            future_dic[future_list[ind]] = price_list[future_ind[ind]:future_ind[ind+1]][1:]\n",
    "        else :\n",
    "            future_dic[future_list[ind]] = price_list[future_ind[ind]:][1:]\n",
    "\n",
    "    df = pd.DataFrame(future_dic,index = 日期).T\n",
    "    df = df.rename_axis(future_name)\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "71deb691-cbd1-49ae-9c3d-39f09709bfd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def table_crawler_kgi() :\n",
    "    table = root.select(\"td , th , .spanBidOff , .c-font-bold div\")\n",
    "    \n",
    "    headers = []\n",
    "    for header in table :\n",
    "        headers.append(header.text.strip())\n",
    "    \n",
    "    future_name = headers[3]\n",
    "    \n",
    "    price_list = headers[15:]\n",
    "    price_list = price_list[0:-1]\n",
    "    日期 = headers[7:14]\n",
    "    \n",
    "    future_list = [] \n",
    "    future_ind = []\n",
    "    for ind , p in enumerate(price_list):\n",
    "        p = p.replace(\",\",'') \n",
    "\n",
    "        if float(p) >200 :       \n",
    "            future_list.append(p)\n",
    "            future_ind.append(ind)\n",
    "\n",
    "\n",
    "    future_dic = {}\n",
    "\n",
    "    for ind in range(len(future_list)):\n",
    "\n",
    "        if ind < len(future_list)-1 :\n",
    "            future_dic[future_list[ind]] = price_list[future_ind[ind]:future_ind[ind+1]][1:]\n",
    "        else :\n",
    "            future_dic[future_list[ind]] = price_list[future_ind[ind]:][1:]\n",
    "    \n",
    "    df = pd.DataFrame(future_dic,index = 日期).T\n",
    "    df = df.rename_axis(future_name)\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "28f6c2c1-8399-426a-a369-9a21c7bfc6f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def indicator_crawler():\n",
    "    indicator = root.select(\".panel:nth-child(4) .col-xs-6\")\n",
    "    indicator_list = strip_html(indicator)\n",
    "    \n",
    "    for i in range(len(indicator_list)) :\n",
    "        indicator_list[i] = indicator_str_replace(indicator_list[i],True)\n",
    "        \n",
    "    indicator_list = indicator_list[:14]\n",
    "    \n",
    "    indicator_dic = {}\n",
    "    for i in range(len(indicator_list[::2])):\n",
    "        indicator = indicator_list[::2][i]\n",
    "        values = indicator_list[1::2][i]\n",
    "        indicator_dic[indicator] = values\n",
    "    df = pd.DataFrame.from_dict(indicator_dic, orient='index', columns=['Value'])\n",
    "    df = df.rename_axis(\"Indicator\")\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d0ffac02-d24f-4bbe-9a24-bb085ce0ec83",
   "metadata": {},
   "outputs": [],
   "source": [
    "def dwprice_crawler() :\n",
    "    dwprice = root.select(\".panel~ .panel .col-xs-6\")\n",
    "    dwprice_list = strip_html(dwprice)\n",
    "    \n",
    "    for i in range(len(dwprice_list)) :\n",
    "        dwprice_list[i] = indicator_str_replace(dwprice_list[i],True)\n",
    "        \n",
    "    dwprice_dic = {}\n",
    "    for i in range(len(dwprice_list[::2])):\n",
    "        dp = dwprice_list[::2][i]\n",
    "        values = dwprice_list[1::2][i]\n",
    "        dwprice_dic[dp] = values\n",
    "        \n",
    "    df = pd.DataFrame.from_dict(dwprice_dic, orient='index', columns=['Value'])\n",
    "    df = df.rename_axis(\"DW Price\")\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "cc951b80-a130-44ac-9fdd-3f212068886d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def term_crawler():\n",
    "    term = root.select(\".col-md-6.c-border\")\n",
    "    term_list = strip_html(term)\n",
    "    \n",
    "    for i in range(len(term_list)) :\n",
    "        term_list[i] = indicator_str_replace(term_list[i],False)\n",
    "        \n",
    "    df = pd.DataFrame(term_list,columns = ['Term'])\n",
    "    # df = df.rename_axis(\"Term\")\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "75a52fb0-68ce-4162-b317-0efeb98a0e16",
   "metadata": {},
   "outputs": [],
   "source": [
    "def dw_excel(path,name) :\n",
    "    # 創建 Workbook\n",
    "    wb = Workbook()\n",
    "\n",
    "    # 儲存 DataFrame\n",
    "    ws = wb.active\n",
    "    ws.title = 'Price Table'\n",
    "    ws.append(table.reset_index().columns.tolist())\n",
    "    for row in table.reset_index().values:\n",
    "        ws.append(list(row))\n",
    "\n",
    "    ws_1 = wb.create_sheet(title='Indicator')\n",
    "    ws_1.append(indicator.reset_index().columns.tolist())\n",
    "    for row in indicator.reset_index().values:\n",
    "        ws_1.append(list(row))\n",
    "\n",
    "    ws_2 = wb.create_sheet(title='DW Price')\n",
    "    ws_2.append(dwprice.reset_index().columns.tolist())\n",
    "    for row in dwprice.reset_index().values:\n",
    "        ws_2.append(list(row))\n",
    "\n",
    "    ws_3 = wb.create_sheet(title='Term')\n",
    "    ws_3.append(term.columns.tolist())\n",
    "    for row in term.reset_index().values:\n",
    "        ws_3.append(list(row))\n",
    "\n",
    "\n",
    "    # 設置工作表的字體\n",
    "    font = Font(name='Calibri', size=12)\n",
    "    for row in ws.iter_rows():\n",
    "        for cell in row:\n",
    "            cell.font = font\n",
    "\n",
    "    for row in ws_1.iter_rows():\n",
    "        for cell in row:\n",
    "            cell.font = font\n",
    "\n",
    "    for row in ws_2.iter_rows():\n",
    "        for cell in row:\n",
    "            cell.font = font\n",
    "\n",
    "    for row in ws_3.iter_rows():\n",
    "        for cell in row:\n",
    "            cell.font = font\n",
    "\n",
    "\n",
    "\n",
    "    # 調整欄寬\n",
    "\n",
    "    for column in ws.columns:\n",
    "        max_length = 0\n",
    "        column_letter = column[0].column_letter\n",
    "        for cell in column:\n",
    "            try:\n",
    "                if len(str(cell.value)) > max_length:\n",
    "                    max_length = len(str(cell.value))\n",
    "            except:\n",
    "                pass\n",
    "        adjusted_width = (max_length + 2) * 1.2\n",
    "        ws.column_dimensions[column_letter].width = adjusted_width\n",
    "        ws.column_dimensions[column_letter].auto_size = True\n",
    "\n",
    "    for column in ws_1.columns:\n",
    "        max_length = 0\n",
    "        column_letter = column[0].column_letter\n",
    "        for cell in column:\n",
    "            try:\n",
    "                if len(str(cell.value)) > max_length:\n",
    "                    max_length = len(str(cell.value))\n",
    "            except:\n",
    "                pass\n",
    "\n",
    "        adjusted_width = (max_length + 2) * 1.2\n",
    "        ws_1.column_dimensions[column_letter].width = adjusted_width\n",
    "        ws_1.column_dimensions[column_letter].auto_size = True\n",
    "\n",
    "    for column in ws_2.columns:\n",
    "        max_length = 0\n",
    "        column_letter = column[0].column_letter\n",
    "        for cell in column:\n",
    "            try:\n",
    "                if len(str(cell.value)) > max_length:\n",
    "                    max_length = len(str(cell.value))\n",
    "            except:\n",
    "                pass\n",
    "\n",
    "        adjusted_width = (max_length + 2) * 1.2\n",
    "        ws_2.column_dimensions[column_letter].width = adjusted_width\n",
    "        ws_2.column_dimensions[column_letter].auto_size = True    \n",
    "\n",
    "    for column in ws_3.columns:\n",
    "        max_length = 0\n",
    "        column_letter = column[0].column_letter\n",
    "        for cell in column:\n",
    "            try:\n",
    "                if len(str(cell.value)) > max_length:\n",
    "                    max_length = len(str(cell.value))\n",
    "            except:\n",
    "                pass\n",
    "\n",
    "        adjusted_width = (max_length + 2) * 1.2\n",
    "        ws_3.column_dimensions[column_letter].width = adjusted_width\n",
    "        ws_3.column_dimensions[column_letter].auto_size = True    \n",
    "\n",
    "    wb.save('%s/%s.xlsx' %(path,name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "135d164d-69d4-4cca-8e14-e502b509855a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "kgi_call_path = '//192.168.60.81/Wellington/泰國研究/Price Table/KGI/'+str((dt.datetime.today()).date())+'/call'\n",
    "if not os.path.isdir(kgi_call_path):\n",
    "    os.makedirs(kgi_call_path)\n",
    "\n",
    "kgi_put_path = '//192.168.60.81/Wellington/泰國研究/Price Table/KGI/'+str((dt.datetime.today()).date())+'/put'\n",
    "if not os.path.isdir(kgi_put_path):\n",
    "    os.makedirs(kgi_put_path)\n",
    "    \n",
    "yuanta_call_path = '//192.168.60.81/Wellington/泰國研究/Price Table/Yuanta/'+str((dt.datetime.today()).date())+'/call'\n",
    "if not os.path.isdir(yuanta_call_path):\n",
    "    os.makedirs(yuanta_call_path)\n",
    "    \n",
    "yuanta_put_path = '//192.168.60.81/Wellington/泰國研究/Price Table/Yuanta/'+str((dt.datetime.today()).date())+'/put'\n",
    "if not os.path.isdir(yuanta_put_path):\n",
    "    os.makedirs(yuanta_put_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7283c51e-f6e4-435e-874c-b7f1fcb2ea0f",
   "metadata": {},
   "source": [
    "爬蟲"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "9bbc4d33-e8a8-4ceb-83cb-b3119043e3cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "kgi_call_list = [\"SET5013C2306A\",\"SET5013C2303D\",\"SET5013C2303C\",\"SET5013C2303A\",\"SET5013C2305A\",\"SET5013C2303B\"]\n",
    "kgi_put_list =['SET5013P2306A','SET5013P2303D','SET5013P2303B','SET5013P2303C','SET5013P2303A','SET5013P2305A'] \n",
    "yuanta_call_list = [\"SET5019C2303A\",\"SET5019C2303B\",\"SET5019C2303C\",\"SET5019C2303D\",\"SET5019C2306A\",\"SET5019C2306B\"]\n",
    "yuanta_put_list = [\"SET5019P2303A\",\"SET5019P2303B\",\"SET5019P2303C\",\"SET5019P2303D\",\"SET5019P2306A\"]        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "36132d73-4083-4ede-a791-ef018ac1b5b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "kgi_success_accese = []\n",
    "kgi_fail_accese = []\n",
    "yuanta_success_accese = [] \n",
    "yuanta_fail_accese = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "eac3f6c1-77c8-4698-960a-912cf1b8e1d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SET5013C2306A 抓取完畢 時間 : 2023-02-24 19:50:21.124815\n",
      "SET5013C2303D 抓取完畢 時間 : 2023-02-24 19:50:22.734509\n",
      "SET5013C2303C 抓取完畢 時間 : 2023-02-24 19:50:24.331238\n",
      "SET5013C2303A 抓取完畢 時間 : 2023-02-24 19:50:25.581898\n",
      "SET5013C2305A 抓取完畢 時間 : 2023-02-24 19:50:26.783677\n",
      "SET5013C2303B 抓取完畢 時間 : 2023-02-24 19:50:27.965516\n"
     ]
    }
   ],
   "source": [
    "# 凱基 call\n",
    "try :\n",
    "    for dw_name in kgi_call_list :\n",
    "\n",
    "            url = \"https://www.thaiwarrant.com/en/dw/%s\" %(dw_name)\n",
    "            request = req.Request(url, headers = { #取得請求權 #若是有條件須透過cookie\n",
    "                                 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36'})\n",
    "\n",
    "            with req.urlopen(request) as response:\n",
    "                data = response.read().decode('utf-8') #抓取原始碼\n",
    "\n",
    "            root = bs4.BeautifulSoup(data, 'html.parser') #處理資料格式\n",
    "\n",
    "            table = table_crawler_kgi()\n",
    "            indicator = indicator_crawler()\n",
    "            dwprice = dwprice_crawler()\n",
    "            term = term_crawler()\n",
    "\n",
    "            dw_excel(kgi_call_path,dw_name)\n",
    "\n",
    "            print(\"%s 抓取完畢 時間 : %s\" %(dw_name, dt.datetime.today()))\n",
    "            kgi_success_accese.append(dw_name)\n",
    "        \n",
    "except:\n",
    "\n",
    "    print(\"%s 發生錯誤\" %(dw_name))\n",
    "    kgi_fail_accese.append(dw_name)\n",
    "    next"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "cb07191b-1d1d-4558-8183-5f38b1e03dd3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SET5013P2306A 抓取完畢 時間 : 2023-02-24 19:50:29.152341\n",
      "SET5013P2303D 抓取完畢 時間 : 2023-02-24 19:50:30.317225\n",
      "SET5013P2303B 抓取完畢 時間 : 2023-02-24 19:50:31.450239\n",
      "SET5013P2303C 抓取完畢 時間 : 2023-02-24 19:50:32.583164\n",
      "SET5013P2303A 抓取完畢 時間 : 2023-02-24 19:50:33.749044\n",
      "SET5013P2305A 抓取完畢 時間 : 2023-02-24 19:50:34.890990\n"
     ]
    }
   ],
   "source": [
    "# 凱基 put\n",
    "try :\n",
    "    for dw_name in kgi_put_list :\n",
    "\n",
    "            url = \"https://www.thaiwarrant.com/en/dw/%s\" %(dw_name)\n",
    "            request = req.Request(url, headers = { #取得請求權 #若是有條件須透過cookie\n",
    "                                 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36'})\n",
    "\n",
    "            with req.urlopen(request) as response:\n",
    "                data = response.read().decode('utf-8') #抓取原始碼\n",
    "\n",
    "            root = bs4.BeautifulSoup(data, 'html.parser') #處理資料格式\n",
    "\n",
    "            table = table_crawler_kgi()\n",
    "            indicator = indicator_crawler()\n",
    "            dwprice = dwprice_crawler()\n",
    "            term = term_crawler()\n",
    "\n",
    "            dw_excel(kgi_put_path,dw_name)\n",
    "            kgi_success_accese.append(dw_name)\n",
    "            print(\"%s 抓取完畢 時間 : %s\" %(dw_name, dt.datetime.today()))\n",
    "            \n",
    "\n",
    "except:\n",
    "    print(\"%s 發生錯誤\" %(dw_name))\n",
    "    kgi_fail_accese.append(dw_name)\n",
    "    next"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ddb6fbe3-6c37-44fa-881f-f1b978527e0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SET5019C2303A 抓取完畢 時間 : 2023-02-24 19:50:36.188518\n",
      "SET5019C2303B 抓取完畢 時間 : 2023-02-24 19:50:37.346421\n",
      "SET5019C2303C 抓取完畢 時間 : 2023-02-24 19:50:38.503327\n",
      "SET5019C2303D 抓取完畢 時間 : 2023-02-24 19:50:39.741015\n",
      "SET5019C2306A 抓取完畢 時間 : 2023-02-24 19:50:40.879969\n",
      "SET5019C2306B 抓取完畢 時間 : 2023-02-24 19:50:42.194479\n"
     ]
    }
   ],
   "source": [
    "# 元大 call\n",
    "try :\n",
    "    for dw_name in yuanta_call_list :\n",
    "\n",
    "            url = \"https://www.thaiwarrant.com/en/dw/%s\" %(dw_name)\n",
    "            request = req.Request(url, headers = { #取得請求權 #若是有條件須透過cookie\n",
    "                                 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36'})\n",
    "\n",
    "            with req.urlopen(request) as response:\n",
    "                data = response.read().decode('utf-8') #抓取原始碼\n",
    "\n",
    "            root = bs4.BeautifulSoup(data, 'html.parser') #處理資料格式\n",
    "\n",
    "            table = table_crawler()\n",
    "            indicator = indicator_crawler()\n",
    "            dwprice = dwprice_crawler()\n",
    "            term = term_crawler()\n",
    "            yuanta_success_accese.append(dw_name)\n",
    "            dw_excel(yuanta_call_path,dw_name)\n",
    "\n",
    "            print(\"%s 抓取完畢 時間 : %s\" %(dw_name, dt.datetime.today()))\n",
    "\n",
    "except:\n",
    "    print(\"%s 發生錯誤\" %(dw_name))\n",
    "    yuanta_fail_accese.append(dw_name)\n",
    "    next"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e3ad03f1-f14a-4421-91da-4c02651da80c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SET5019P2303A 抓取完畢 時間 : 2023-02-24 19:50:43.470040\n",
      "SET5019P2303B 抓取完畢 時間 : 2023-02-24 19:50:44.746626\n",
      "SET5019P2303C 抓取完畢 時間 : 2023-02-24 19:50:46.044154\n",
      "SET5019P2303D 抓取完畢 時間 : 2023-02-24 19:50:47.245985\n",
      "SET5019P2306A 抓取完畢 時間 : 2023-02-24 19:50:48.423788\n"
     ]
    }
   ],
   "source": [
    "# 元大 put\n",
    "try :\n",
    "    for dw_name in yuanta_put_list :\n",
    "\n",
    "            url = \"https://www.thaiwarrant.com/en/dw/%s\" %(dw_name)\n",
    "            request = req.Request(url, headers = { #取得請求權 #若是有條件須透過cookie\n",
    "                                 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36'})\n",
    "\n",
    "            with req.urlopen(request) as response:\n",
    "                data = response.read().decode('utf-8') #抓取原始碼\n",
    "\n",
    "            root = bs4.BeautifulSoup(data, 'html.parser') #處理資料格式\n",
    "\n",
    "            table = table_crawler()\n",
    "            indicator = indicator_crawler()\n",
    "            dwprice = dwprice_crawler()\n",
    "            term = term_crawler()\n",
    "\n",
    "            dw_excel(yuanta_put_path,dw_name)\n",
    "            yuanta_success_accese.append(dw_name)\n",
    "            print(\"%s 抓取完畢 時間 : %s\" %(dw_name, dt.datetime.today()))\n",
    "except:\n",
    "    print(\"%s 發生錯誤\" %(dw_name))\n",
    "    yuanta_fail_accese.append(dw_name)\n",
    "    next"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "1c7e3a0a-5e01-4402-890b-f75294aee65e",
   "metadata": {},
   "outputs": [],
   "source": [
    "key = '0TA4oEItd7e346tDOfkmuQTVT11usbZcnKH29wm6W8u'\n",
    "\n",
    "line_notify_kgi(key,kgi_success_accese,kgi_fail_accese)\n",
    "\n",
    "line_notify_yuanta(key,yuanta_success_accese,yuanta_fail_accese)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
